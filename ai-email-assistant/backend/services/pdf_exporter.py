from datetime import datetime
from typing import Dict, Optional
from fpdf import FPDF
import os

class EmailPDF(FPDF):
    """Custom PDF class with header and footer for email exports."""
    
    def __init__(self, metadata: Dict[str, str]):
        super().__init__()
        self.metadata = metadata
    
    def header(self):
        """Add custom header to each page."""
        # Logo (if exists)
        logo_path = os.path.join(os.path.dirname(__file__), "../static/logo.png")
        if os.path.exists(logo_path):
            self.image(logo_path, 10, 8, 33)
        
        # Header text
        self.set_font("Arial", "B", 15)
        self.cell(80)  # Move to position
        self.cell(30, 10, "Email Export", 0, 0, "C")
        
        # Date
        self.set_font("Arial", "I", 10)
        self.cell(80, 10, f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}", 0, 0, "R")
        
        # Line break
        self.ln(20)
    
    def footer(self):
        """Add custom footer to each page."""
        self.set_y(-15)  # Position at 1.5 cm from bottom
        self.set_font("Arial", "I", 8)
        
        # Add metadata if available
        if "author" in self.metadata:
            self.cell(0, 10, f"Generated by: {self.metadata['author']} |", 0, 0, "L")
        
        # Page number
        self.cell(0, 10, f"Page {str(self.page_no())}", 0, 0, "R")

def format_email_body(body: str) -> str:
    """Format email body for PDF export with proper line breaks and spacing."""
    # Remove excessive newlines
    body = "\n".join(line.strip() for line in body.split("\n") if line.strip())
    
    # Add proper paragraph spacing
    paragraphs = body.split("\n")
    return "\n\n".join(paragraphs)

def export_email_to_pdf(
    subject: str,
    body: str,
    filename: str,
    metadata: Optional[Dict[str, str]] = None,
    include_timestamp: bool = True
) -> None:
    """
    Generate a professionally formatted PDF file from email content.

    Args:
        subject (str): Email subject line.
        body (str): Full email body text.
        filename (str): Output file path (e.g., ./pdfs/email_3.pdf)
        metadata (Optional[Dict[str, str]]): Additional metadata for the PDF
        include_timestamp (bool): Whether to include generation timestamp

    Returns:
        None
    """
    # Initialize PDF with metadata
    metadata = metadata or {}
    if include_timestamp:
        metadata["generated"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    pdf = EmailPDF(metadata)
    
    # Set up document properties
    pdf.set_title(f"Email: {subject}")
    pdf.set_author(metadata.get("author", "AI Email Assistant"))
    pdf.set_creator("AI Email Assistant")
    
    # Add content
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    
    # Subject
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Subject:", ln=True)
    pdf.set_font("Arial", "", 14)
    pdf.multi_cell(0, 10, subject)
    pdf.ln(5)
    
    # Metadata
    if metadata:
        pdf.set_font("Arial", "I", 10)
        for key, value in metadata.items():
            if key not in ["author", "generated"]:  # Skip header/footer info
                pdf.cell(0, 5, f"{key.capitalize()}: {value}", ln=True)
        pdf.ln(5)
    
    # Body
    pdf.set_font("Arial", "", 12)
    formatted_body = format_email_body(body)
    pdf.multi_cell(0, 10, formatted_body)
    
    # Ensure output directory exists
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    
    # Save file
    pdf.output(filename)
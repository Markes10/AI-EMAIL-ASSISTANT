name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        JWT_SECRET: test_secret
        EMAIL_HOST: test_smtp.example.com
        EMAIL_PORT: 587
        EMAIL_USERNAME: test@example.com
        EMAIL_PASSWORD: test_password
      run: |
        pytest --cov=. --cov-report=xml

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --coverage
      
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info

  build-and-scan:
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build backend image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.backend
        push: false
        tags: ai-email-assistant-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build frontend image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.frontend
        push: false
        tags: ai-email-assistant-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ai-email-assistant-backend:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    needs: build-and-scan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure deployment credentials
      run: |
        # Add deployment steps here based on your hosting platform
        # For example, deploying to Azure, AWS, or Google Cloud
        echo "Deployment steps to be configured based on hosting platform"
